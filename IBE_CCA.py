from charm.schemes.ibenc.ibenc_bf01 import IBE_BonehFranklin
from charm.toolbox.integergroup import IntegerGroup
from charm.toolbox.pairinggroup import PairingGroup, ZR, G1, G2, GT, pair
from Crypto.Util import number

# For k = 1024
# p = 161960094571423416678455205112067081917430081915222808716491487860017818315602500903484423726552844872697941382756840080727478885324916911743268643836801689166353167893176020215936118470072394496636103945093253593494942641002927154305633956584117438626500221989124719884047264462619654996321754972363864682553
# q = 26993349095237236113075867518677846986238346985870468119415247976669636385933750150580737287758807478782990230459473346787913147554152818623878107306133614861058861315529336702656019745012065749439350657515542265582490440167154525717605659430686239771083370331520786647341210743769942499386959162060644113759
# For k = 512
p = 12130867668754265314988233668631345764957476273119845000744190034105101373392739302312191832889866699052362231755172441291489810480687421397712636710300497
q = 2021811278125710885831372278105224294159579378853307500124031672350850228898789883718698638814977783175393705292528740215248301746781236899618772785050083


def calculatePQ(k):
    suitablePrimeFound = False
    while not suitablePrimeFound:
        q = number.getPrime(k - 2)
        p = (q * 6) - 1
        if number.isPrime(p) and p.bit_length() == k:
            suitablePrimeFound = True
    return (p, q)


from charm.toolbox.pairinggroup import PairingGroup

if __name__ == '__main__':
    # Setup
    # (p, q) = calculatePQ(512) """
    group = PairingGroup('MNT224', secparam=1024)
    ibe = IBE_BonehFranklin(group)
    (master_public_key, master_secret_key) = ibe.setup()
    ID = 'user@email.com'
    ID_wrong = "wrong@email.com"
    private_key = ibe.extract(master_secret_key, ID)
    msg = b"Wtf is this"
    cipher_text = ibe.encrypt(master_public_key, ID, msg)
    print(cipher_text)
    m = ibe.decrypt(master_public_key, private_key, cipher_text)
    print(m.decode("utf-8"))
